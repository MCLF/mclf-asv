{
    "semistable.JSMCurve.time_is_semistable": {
        "code": "def time_is_semistable(self):\n    K = FunctionField(QQ, 'x')\n    x = K.gen()\n    R = PolynomialRing(K, 'T')\n    T = R.gen()\n    f = 64*x**3*T - 64*x**3 + 36*x**2*T**2 + 208*x**2*T + 192*x**2 + 9*x*T**3 + 72*x*T**2 + 240*x*T + 64*x +T**4 + 9*T**3 + 52*T**2 + 48*T\n    L = K.extension(f, 'y')\n    Y = SmoothProjectiveCurve(L)\n    v = QQ.valuation(13)\n    M = SemistableModel(Y, v)\n    return M.is_semistable()\n", 
        "goal_time": 2.0, 
        "name": "semistable.JSMCurve.time_is_semistable", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "pretty_name": "semistable.JSMCurve.time_is_semistable", 
        "repeat": 0, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "semistable.PicardCurve.time_is_semistable": {
        "code": "def time_is_semistable(self):\n    R = PolynomialRing(QQ, 'x')\n    x = R.gen()\n    Y = SuperellipticCurve(x**4 - 1, 3)\n    v_2 = QQ.valuation(2)\n    Y2 = SemistableModel(Y, v_2)\n    return Y2.is_semistable()\n", 
        "goal_time": 2.0, 
        "name": "semistable.PicardCurve.time_is_semistable", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "pretty_name": "semistable.PicardCurve.time_is_semistable", 
        "repeat": 0, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds"
    }, 
    "version": 1
}